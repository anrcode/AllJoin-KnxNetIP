using System;
using System.Threading.Tasks;
using Spark.Universal.Net;


namespace IrTransAdapter.IrTrans.Discovery
{
    internal class IrTransDiscovery : SparkAlljoyn.Discovery.AdapterDiscoveryBase
    {
        private static byte[] DISCOVER_REQUEST = {
                            0x02,0x01,0x06,0x00,0xAA,0xBB,0xCC,0xDD,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,
                            0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x82,0x53,0x63,
                            0x35,0x01,0xBB,0xE9,0x04,0x78,0xA3,0x8B,0x84,0xFF};

        public IrTransDiscovery()
        {
            
        }      

        protected override void Discover()
        {
            var udpClient = new UdpClient();
            udpClient.DataReceived += SocketDataReceived;
            udpClient.BindSocket("67");

            Task.Run(async () =>
            {
                await udpClient.Send(UdpClient.BROADCAST_ADDR, "68", DISCOVER_REQUEST);
                await Task.Delay(5000);

                udpClient.DataReceived -= SocketDataReceived;
                udpClient.Dispose();
                udpClient = null;
            });           
        }

        private void SocketDataReceived(object sender, DataReceivedEventArgs e)
        {
            if ((e.Data.Length < 50) ||
                (e.Data[4] != DISCOVER_REQUEST[4]) || (e.Data[5] != DISCOVER_REQUEST[5]) ||
                (e.Data[6] != DISCOVER_REQUEST[6]) || (e.Data[7] != DISCOVER_REQUEST[7]))
            {
                return;
            }

            var hostName = e.RemoteAddress;
            string mac = BitConverter.ToString(e.Data, 28, 6).Replace("-", "");
            if (this.AlreadyDiscovered(mac))
            {
                return;
            }

            var conn = new IrTransClient(e.RemoteAddress, "21000");
            this.AddDevice(mac, conn);
        }
    }
}
